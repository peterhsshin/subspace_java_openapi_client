/*
 * Subspace Product API
 * # Introduction  The Subspace API is based on REST, has resource-oriented URLs, returns JSON-encoded responses, and returns standardHTTP response codes.  The base URL for the API is `https://api.subspace.com/`  # Naming Convention  **EARLY ACCESS NOTE:** There is no “stable” version yet.  Once there is, the version name **stable** will be used to access the latest stable API version.   * Example: `https://api.subspace.com/stable` * Version name currently in use is: *v1*   * Example: `https://api.subspace.com/v1`  # Authentication  ## API Tokens  Subspace authenticates your API requests using JWT Bearer tokens.  The provided client library requires this JWT to be set before it can be used, by setting the local access token in the local configuration.  This is done by updating the configuration line marked \"YOUR ACCESS TOKEN\" by replacing the text \"YOUR ACCESS TOKEN\" with your JWT Bearer token.  Bearer tokens are granted by requesting one (as noted below) and presenting your publishable (client_id) and secret (client_secret) tokens.     Subspace provides two types of API tokens: publishable (client_id) and secret (client_secret).  These are available in the Subspace console.   * **Publishable** API tokens (client_id) are meant solely to identify your account with Subspace, they aren’t secret. They can be published in places like your website JavaScript code, or in an iPhone or Android app.   * **Secret** API tokens (client_secret) should be kept confidential and only stored on your own servers. Your account’s secret API token will allow you to acquire a valid JWT token authorized to perform any API request to Subspace.  ## Getting a JWT Bearer Token  Subspace uses auth0 for JWT token management.  You can acquire a JWT token by utilizing `https://id.subspace.com` and following the instructions in the curl example below.  ## Protecting Your API Tokens    * **JWT tokens have a expiration time of 24 hours.**  Once expired, you will have to use your Subspace private API and public token to request a new one.   * The Subspace private token can be rotated from within the Subspace console.  Rotation may take up to 10 minutes for all systems to update state to invalidate the older token and enable the new one. * **Keep your secret token safe.** Your secret token can make any API call on behalf of your account, including changes that may impact billing such as enabling pay-as-you-go charges. Do not store your secret token in your version control system. Do not use your secret token outside your web server, such as a browser, mobile app, or distributed file.   * **You may use the Subspace console to acquire an API token.**  * **You may use the Subspace console to disable pay-as-you-go.** This may prevent unexpected charges due to unauthorized or abnormal usage.  **Acquiring a valid JWT**  Command line example: ``` curl --request POST           --url 'https://id.subspace.com/oauth/token'           --header 'content-type: application/json'           --data '{ \"client_id\": YOURCLIENTID, \"client_secret\": YOURCLIENTSECRET, \"audience\": \"https://api.subspace.com/\", \"grant_type\": \"client_credentials\" }' ``` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sales@subspace.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.V1Protocol;

/**
 * V1Accelerator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-07-16T22:06:12.741Z[GMT]")
public class V1Accelerator {
  public static final String SERIALIZED_NAME_DESTINATION_IP = "destinationIp";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IP)
  private String destinationIp;

  public static final String SERIALIZED_NAME_DESTINATION_PORT = "destinationPort";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORT)
  private Long destinationPort;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private V1Protocol protocol = V1Protocol.UDP;

  public static final String SERIALIZED_NAME_SUBSPACE_IP = "subspaceIp";
  @SerializedName(SERIALIZED_NAME_SUBSPACE_IP)
  private String subspaceIp;

  public static final String SERIALIZED_NAME_SUBSPACE_IPV4 = "subspaceIpv4";
  @SerializedName(SERIALIZED_NAME_SUBSPACE_IPV4)
  private String subspaceIpv4;

  public static final String SERIALIZED_NAME_SUBSPACE_PORT = "subspacePort";
  @SerializedName(SERIALIZED_NAME_SUBSPACE_PORT)
  private Long subspacePort;


  public V1Accelerator destinationIp(String destinationIp) {
    
    this.destinationIp = destinationIp;
    return this;
  }

   /**
   * Get destinationIp
   * @return destinationIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDestinationIp() {
    return destinationIp;
  }


  public void setDestinationIp(String destinationIp) {
    this.destinationIp = destinationIp;
  }


  public V1Accelerator destinationPort(Long destinationPort) {
    
    this.destinationPort = destinationPort;
    return this;
  }

   /**
   * Get destinationPort
   * @return destinationPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getDestinationPort() {
    return destinationPort;
  }


  public void setDestinationPort(Long destinationPort) {
    this.destinationPort = destinationPort;
  }


  public V1Accelerator id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public V1Accelerator name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1Accelerator protocol(V1Protocol protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1Protocol getProtocol() {
    return protocol;
  }


  public void setProtocol(V1Protocol protocol) {
    this.protocol = protocol;
  }


  public V1Accelerator subspaceIp(String subspaceIp) {
    
    this.subspaceIp = subspaceIp;
    return this;
  }

   /**
   * Get subspaceIp
   * @return subspaceIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubspaceIp() {
    return subspaceIp;
  }


  public void setSubspaceIp(String subspaceIp) {
    this.subspaceIp = subspaceIp;
  }


  public V1Accelerator subspaceIpv4(String subspaceIpv4) {
    
    this.subspaceIpv4 = subspaceIpv4;
    return this;
  }

   /**
   * Get subspaceIpv4
   * @return subspaceIpv4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubspaceIpv4() {
    return subspaceIpv4;
  }


  public void setSubspaceIpv4(String subspaceIpv4) {
    this.subspaceIpv4 = subspaceIpv4;
  }


  public V1Accelerator subspacePort(Long subspacePort) {
    
    this.subspacePort = subspacePort;
    return this;
  }

   /**
   * Get subspacePort
   * @return subspacePort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getSubspacePort() {
    return subspacePort;
  }


  public void setSubspacePort(Long subspacePort) {
    this.subspacePort = subspacePort;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Accelerator v1Accelerator = (V1Accelerator) o;
    return Objects.equals(this.destinationIp, v1Accelerator.destinationIp) &&
        Objects.equals(this.destinationPort, v1Accelerator.destinationPort) &&
        Objects.equals(this.id, v1Accelerator.id) &&
        Objects.equals(this.name, v1Accelerator.name) &&
        Objects.equals(this.protocol, v1Accelerator.protocol) &&
        Objects.equals(this.subspaceIp, v1Accelerator.subspaceIp) &&
        Objects.equals(this.subspaceIpv4, v1Accelerator.subspaceIpv4) &&
        Objects.equals(this.subspacePort, v1Accelerator.subspacePort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationIp, destinationPort, id, name, protocol, subspaceIp, subspaceIpv4, subspacePort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Accelerator {\n");
    sb.append("    destinationIp: ").append(toIndentedString(destinationIp)).append("\n");
    sb.append("    destinationPort: ").append(toIndentedString(destinationPort)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    subspaceIp: ").append(toIndentedString(subspaceIp)).append("\n");
    sb.append("    subspaceIpv4: ").append(toIndentedString(subspaceIpv4)).append("\n");
    sb.append("    subspacePort: ").append(toIndentedString(subspacePort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

